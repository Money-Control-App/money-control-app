{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Doc\\\\Cursor\\\\money-control-app\\\\src\\\\components\\\\Settings\\\\MainSetting.js\",\n    _s = $RefreshSig$();\n\nimport React, { useSate } from 'react';\nimport FillForm from './FillForm';\nimport { Input } from './PartsForm/Input';\nimport { ButtonSubmit } from './PartsForm/ButtonSubmit';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useData } from './DataUser';\nimport * as yup from 'yup';\nimport \"yup-phone\";\nimport parsePhoneNumberFromString from 'libphonenumber-js';\nconst REGULAR_NOT_NUMBER = /^([^0-9]*)$/;\nconst MESSAGE_FOR_FILL = 'Fill this field';\nconst phoneRegExp = /^(\\+?\\d{0,4})?\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{4}\\)?)?$/;\nconst schema = yup.object().shape({\n  firstName: yup.string().matches(REGULAR_NOT_NUMBER, 'First name should be without numbers').required(MESSAGE_FOR_FILL).min(2, \"At least two characters\"),\n  lastName: yup.string().matches(REGULAR_NOT_NUMBER, 'Last name should be without numbers').required(MESSAGE_FOR_FILL).min(2, \"At least two characters\"),\n  email: yup.string().email(\"Email. should have correct format\").required(MESSAGE_FOR_FILL),\n  phoneNumber: yup.string().matches(phoneRegExp, 'Phone number is invalid')\n});\n\nconst formatTheNumber = inputNumber => {\n  const phoneNumber = parsePhoneNumberFromString(inputNumber);\n  return !phoneNumber ? inputNumber : phoneNumber.formatInternational();\n};\n\nexport const MainSetting = () => {\n  _s();\n\n  var _errors$firstName, _errors$lastName, _errors$email, _errors$phoneNumber;\n\n  const [data, setValues] = useSate();\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm({\n    // defaultValues: {firstName: date.firstName, lastName: date.lastName},\n    mode: 'onBlur',\n    resolver: yupResolver(schema)\n  });\n\n  const onSubmit = dataa => {\n    setValues(dataa);\n    console.log(dataa);\n  };\n\n  return /*#__PURE__*/_jsxDEV(FillForm, {\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form__names\",\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        ref: register,\n        id: \"firstName\",\n        type: \"text\",\n        label: \"First name\",\n        name: \"firstName\",\n        required: true,\n        error: !!errors.firstName,\n        helperText: errors === null || errors === void 0 ? void 0 : (_errors$firstName = errors.firstName) === null || _errors$firstName === void 0 ? void 0 : _errors$firstName.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        ref: register,\n        id: \"lastName\",\n        type: \"text\",\n        label: \"Last name\",\n        name: \"lastName\",\n        required: true,\n        error: !!errors.lastName,\n        helperText: errors === null || errors === void 0 ? void 0 : (_errors$lastName = errors.lastName) === null || _errors$lastName === void 0 ? void 0 : _errors$lastName.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      ref: register,\n      id: \"nickname\",\n      type: \"text\",\n      label: \"Nickname\",\n      name: \"nickname\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      ref: register,\n      id: \"email\",\n      type: \"email\",\n      label: \"E-mail\",\n      name: \"email\",\n      required: true,\n      error: !!errors.email,\n      helperText: errors === null || errors === void 0 ? void 0 : (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      ref: register,\n      id: \"phoneNumber\",\n      type: \"tel\",\n      label: \"Phone number\",\n      name: \"phoneNumber\",\n      error: !!errors.phoneNumber,\n      helperText: errors === null || errors === void 0 ? void 0 : (_errors$phoneNumber = errors.phoneNumber) === null || _errors$phoneNumber === void 0 ? void 0 : _errors$phoneNumber.message,\n      onChange: event => event.target.value = formatTheNumber(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ButtonSubmit, {\n      children: \"Ok\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MainSetting, \"E6ATQFgdB6T6VBcH6up+jKXcNyI=\", false, function () {\n  return [useSate, useForm];\n});\n\n_c = MainSetting;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainSetting\");","map":{"version":3,"sources":["D:/Doc/Cursor/money-control-app/src/components/Settings/MainSetting.js"],"names":["React","useSate","FillForm","Input","ButtonSubmit","useForm","yupResolver","useData","yup","parsePhoneNumberFromString","REGULAR_NOT_NUMBER","MESSAGE_FOR_FILL","phoneRegExp","schema","object","shape","firstName","string","matches","required","min","lastName","email","phoneNumber","formatTheNumber","inputNumber","formatInternational","MainSetting","data","setValues","register","handleSubmit","errors","mode","resolver","onSubmit","dataa","console","log","message","event","target","value"],"mappings":"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","sourcesContent":["import React, {useSate} from 'react';\r\nimport FillForm from './FillForm';\r\nimport { Input } from './PartsForm/Input';\r\nimport { ButtonSubmit } from './PartsForm/ButtonSubmit';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useData } from './DataUser';\r\nimport * as yup from 'yup';\r\nimport \"yup-phone\";\r\nimport parsePhoneNumberFromString from 'libphonenumber-js';\r\n\r\nconst REGULAR_NOT_NUMBER = /^([^0-9]*)$/;\r\nconst MESSAGE_FOR_FILL = 'Fill this field';\r\nconst phoneRegExp = /^(\\+?\\d{0,4})?\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{4}\\)?)?$/;\r\n\r\nconst schema = yup.object().shape({\r\n    firstName:\r\n        yup.string()\r\n            .matches(REGULAR_NOT_NUMBER, 'First name should be without numbers')\r\n            .required(MESSAGE_FOR_FILL)\r\n            .min(2, \"At least two characters\"),\r\n    lastName:\r\n        yup.string()\r\n            .matches(REGULAR_NOT_NUMBER, 'Last name should be without numbers')\r\n            .required(MESSAGE_FOR_FILL)\r\n            .min(2, \"At least two characters\"),\r\n    email:\r\n        yup.string()\r\n            .email(\"Email. should have correct format\")\r\n            .required(MESSAGE_FOR_FILL),\r\n    phoneNumber:\r\n        yup.string()\r\n            .matches(phoneRegExp, 'Phone number is invalid')\r\n});\r\n\r\nconst formatTheNumber = (inputNumber) => {\r\n    const phoneNumber = parsePhoneNumberFromString(inputNumber);\r\n    return (!phoneNumber) ? inputNumber :\r\n        phoneNumber.formatInternational();\r\n};\r\n\r\nexport const MainSetting = () => {\r\n    const [data, setValues] = useSate();\r\n    const { register, handleSubmit, errors } = useForm({\r\n        // defaultValues: {firstName: date.firstName, lastName: date.lastName},\r\n        mode: 'onBlur',\r\n        resolver: yupResolver(schema)\r\n    });\r\n\r\n    const onSubmit = (dataa) => {\r\n     \r\n        setValues(dataa);\r\n        console.log(dataa);\r\n    };\r\n    return (\r\n        <FillForm onSubmit={handleSubmit(onSubmit)} >\r\n            <div className=\"form__names\">\r\n                <Input\r\n                    ref={register}\r\n                    id='firstName'\r\n                    type='text'\r\n                    label='First name'\r\n                    name='firstName'\r\n                    required\r\n                    error={!!errors.firstName}\r\n                    helperText={errors?.firstName?.message}\r\n                />\r\n                <Input\r\n                    ref={register}\r\n                    id='lastName'\r\n                    type='text'\r\n                    label='Last name'\r\n                    name='lastName'\r\n                    required\r\n                    error={!!errors.lastName}\r\n                    helperText={errors?.lastName?.message}\r\n                />\r\n            </div>\r\n            <Input\r\n                ref={register}\r\n                id='nickname'\r\n                type='text'\r\n                label='Nickname'\r\n                name='nickname'\r\n            />\r\n            <Input\r\n                ref={register}\r\n                id='email'\r\n                type='email'\r\n                label='E-mail'\r\n                name='email'\r\n                required\r\n                error={!!errors.email}\r\n                helperText={errors?.email?.message}\r\n            />\r\n            <Input\r\n                ref={register}\r\n                id='phoneNumber'\r\n                type='tel'\r\n                label='Phone number'\r\n                name='phoneNumber'\r\n                error={!!errors.phoneNumber}\r\n                helperText={errors?.phoneNumber?.message}\r\n                onChange={(event) => event.target.value = formatTheNumber(event.target.value)}\r\n            />\r\n            <ButtonSubmit>Ok</ButtonSubmit>\r\n        </FillForm>\r\n    )\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}