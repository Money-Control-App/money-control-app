{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Doc\\\\Cursor\\\\money-control-app\\\\src\\\\components\\\\Settings\\\\MainSetting.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport FillForm from './FillForm';\nimport { Input } from './PartsForm/Input';\nimport { ButtonSubmit } from './PartsForm/ButtonSubmit';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useData } from './DataUser';\nimport { Avatar } from './Avatar';\nimport blankPhoto from '../../img/newUser/blank_photo.webp';\nimport * as yup from 'yup';\nimport \"yup-phone\";\nimport parsePhoneNumberFromString from 'libphonenumber-js';\nconst REGULAR_NOT_NUMBER = /^([^0-9]*)$/;\nconst MESSAGE_FOR_FILL = 'Fill this field';\nconst PHONE_REGEXP = /^(\\+?\\d{0,4})?\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{4}\\)?)?$/;\nconst schema = yup.object().shape({\n  firstName: yup.string().matches(REGULAR_NOT_NUMBER, 'First name should be without numbers').required(MESSAGE_FOR_FILL).min(2, \"At least two characters\"),\n  lastName: yup.string().matches(REGULAR_NOT_NUMBER, 'Last name should be without numbers').required(MESSAGE_FOR_FILL).min(2, \"At least two characters\"),\n  email: yup.string().email(\"Email. should have correct format\").required(MESSAGE_FOR_FILL),\n  phoneNumber: yup.string().required(MESSAGE_FOR_FILL).matches(PHONE_REGEXP, 'Phone number is invalid'),\n  loadAvatar: yup.array().nullable().required(MESSAGE_FOR_FILL).test(\"type\", \"We only support jpeg\", value => {\n    return value && value[0].type === \"image/jpeg\";\n  })\n});\n\nconst formatTheNumber = inputNumber => {\n  const phoneNumber = parsePhoneNumberFromString(inputNumber);\n  return !phoneNumber ? inputNumber : phoneNumber.formatInternational();\n};\n\nexport const MainSetting = () => {\n  _s();\n\n  var _errors$firstName, _errors$lastName, _errors$loadAvatar, _errors$email, _errors$phoneNumber;\n\n  const {\n    data,\n    setValues\n  } = useData();\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm({\n    mode: 'onBlur',\n    resolver: yupResolver(schema)\n  }); // const { register, handleSubmit } = useForm | ({})\n\n  const [profilePhoto, setAvatar] = useState(blankPhoto);\n\n  const photoHandle = event => {\n    const newPhoto = new FileReader();\n\n    newPhoto.onload = () => {\n      if (newPhoto.readyState === 2) {\n        setAvatar(newPhoto.result);\n      }\n    };\n\n    newPhoto.readAsDataURL(event.target.files[0]);\n  };\n\n  const onSubmit = data => {\n    // кудась перейти\n    setValues(data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(FillForm, {\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form__head\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form__names\",\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          ref: register,\n          id: \"firstName\",\n          type: \"text\",\n          label: \"First name\",\n          name: \"firstName\",\n          required: true,\n          error: !!errors.firstName,\n          helperText: errors === null || errors === void 0 ? void 0 : (_errors$firstName = errors.firstName) === null || _errors$firstName === void 0 ? void 0 : _errors$firstName.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          ref: register,\n          id: \"lastName\",\n          type: \"text\",\n          label: \"Last name\",\n          name: \"lastName\",\n          required: true,\n          error: !!errors.lastName,\n          helperText: errors === null || errors === void 0 ? void 0 : (_errors$lastName = errors.lastName) === null || _errors$lastName === void 0 ? void 0 : _errors$lastName.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form__avatar\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: profilePhoto,\n            className: \"avatar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 26\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          ref: register,\n          className: \"form__avatar--load\",\n          name: \"loadAvatar\",\n          type: \"file\",\n          id: \"loadAvatar\",\n          accept: \".png, .jpg, .jpeg\",\n          onChange: photoHandle,\n          error: !!errors.loadAvatar,\n          helperText: errors === null || errors === void 0 ? void 0 : (_errors$loadAvatar = errors.loadAvatar) === null || _errors$loadAvatar === void 0 ? void 0 : _errors$loadAvatar.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      ref: register,\n      id: \"nickname\",\n      type: \"text\",\n      label: \"Nickname\",\n      name: \"nickname\",\n      defaultValue: \"@\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      ref: register,\n      id: \"email\",\n      type: \"email\",\n      label: \"E-mail\",\n      name: \"email\",\n      required: true,\n      error: !!errors.email,\n      helperText: errors === null || errors === void 0 ? void 0 : (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      ref: register,\n      id: \"phoneNumber\",\n      type: \"tel\",\n      label: \"Phone number\",\n      name: \"phoneNumber\",\n      defaultValue: \"+38\",\n      error: !!errors.phoneNumber,\n      helperText: errors === null || errors === void 0 ? void 0 : (_errors$phoneNumber = errors.phoneNumber) === null || _errors$phoneNumber === void 0 ? void 0 : _errors$phoneNumber.message,\n      onChange: event => event.target.value = formatTheNumber(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ButtonSubmit, {\n      children: \"Ok\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MainSetting, \"KqGPk6FB9crzoRcsdEkBIEoMiIk=\", false, function () {\n  return [useData, useForm];\n});\n\n_c = MainSetting;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainSetting\");","map":{"version":3,"sources":["D:/Doc/Cursor/money-control-app/src/components/Settings/MainSetting.js"],"names":["React","useState","FillForm","Input","ButtonSubmit","useForm","yupResolver","useData","Avatar","blankPhoto","yup","parsePhoneNumberFromString","REGULAR_NOT_NUMBER","MESSAGE_FOR_FILL","PHONE_REGEXP","schema","object","shape","firstName","string","matches","required","min","lastName","email","phoneNumber","loadAvatar","array","nullable","test","value","type","formatTheNumber","inputNumber","formatInternational","MainSetting","data","setValues","register","handleSubmit","errors","mode","resolver","profilePhoto","setAvatar","photoHandle","event","newPhoto","FileReader","onload","readyState","result","readAsDataURL","target","files","onSubmit","message"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport FillForm from './FillForm';\r\nimport { Input } from './PartsForm/Input';\r\nimport { ButtonSubmit } from './PartsForm/ButtonSubmit';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useData } from './DataUser';\r\nimport { Avatar } from './Avatar';\r\nimport blankPhoto from '../../img/newUser/blank_photo.webp';\r\nimport * as yup from 'yup';\r\nimport \"yup-phone\";\r\nimport parsePhoneNumberFromString from 'libphonenumber-js';\r\n\r\nconst REGULAR_NOT_NUMBER = /^([^0-9]*)$/;\r\nconst MESSAGE_FOR_FILL = 'Fill this field';\r\nconst PHONE_REGEXP = /^(\\+?\\d{0,4})?\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{4}\\)?)?$/;\r\n\r\nconst schema = yup.object().shape({\r\n    firstName:\r\n        yup.string()\r\n            .matches(REGULAR_NOT_NUMBER, 'First name should be without numbers')\r\n            .required(MESSAGE_FOR_FILL)\r\n            .min(2, \"At least two characters\"),\r\n    lastName:\r\n        yup.string()\r\n            .matches(REGULAR_NOT_NUMBER, 'Last name should be without numbers')\r\n            .required(MESSAGE_FOR_FILL)\r\n            .min(2, \"At least two characters\"),\r\n    email:\r\n        yup.string()\r\n            .email(\"Email. should have correct format\")\r\n            .required(MESSAGE_FOR_FILL),\r\n    phoneNumber:\r\n        yup.string()\r\n            .required(MESSAGE_FOR_FILL)\r\n            .matches(PHONE_REGEXP, 'Phone number is invalid'),\r\n    loadAvatar:\r\n        yup.array()\r\n            .nullable()\r\n            .required(MESSAGE_FOR_FILL)\r\n            .test(\"type\", \"We only support jpeg\", (value) => {\r\n                return value && value[0].type === \"image/jpeg\";\r\n              })\r\n});\r\n\r\nconst formatTheNumber = (inputNumber) => {\r\n    const phoneNumber = parsePhoneNumberFromString(inputNumber);\r\n    return (!phoneNumber) ? inputNumber :\r\n        phoneNumber.formatInternational();\r\n};\r\n\r\nexport const MainSetting = () => {\r\n    const { data, setValues } = useData();\r\n    const { register, handleSubmit, errors } = useForm({\r\n        mode: 'onBlur',\r\n        resolver: yupResolver(schema)\r\n    });\r\n    // const { register, handleSubmit } = useForm | ({})\r\n    const [profilePhoto, setAvatar] = useState(blankPhoto);\r\n\r\n    const photoHandle = (event) => {\r\n        const newPhoto = new FileReader();\r\n        newPhoto.onload = () => {\r\n            if (newPhoto.readyState === 2) {\r\n                setAvatar(newPhoto.result)\r\n            }\r\n        }\r\n        newPhoto.readAsDataURL(event.target.files[0])\r\n    }\r\n    const onSubmit = (data) => {\r\n        // кудась перейти\r\n        setValues(data);\r\n    };\r\n    return (\r\n        <FillForm onSubmit={handleSubmit(onSubmit)} >\r\n            <div className='form__head'>\r\n                <div className=\"form__names\">\r\n                    <Input\r\n                        ref={register}\r\n                        id='firstName'\r\n                        type='text'\r\n                        label='First name'\r\n                        name='firstName'\r\n                        required\r\n                        error={!!errors.firstName}\r\n                        helperText={errors?.firstName?.message}\r\n                    />\r\n                    <Input\r\n                        ref={register}\r\n                        id='lastName'\r\n                        type='text'\r\n                        label='Last name'\r\n                        name='lastName'\r\n                        required\r\n                        error={!!errors.lastName}\r\n                        helperText={errors?.lastName?.message}\r\n                    />\r\n                </div>\r\n\r\n                <div className='form__avatar'>\r\n                    <div><img src={profilePhoto} className='avatar' /></div>\r\n                    <Input\r\n                        ref={register}\r\n                        className='form__avatar--load'\r\n                        name='loadAvatar'\r\n                        type='file'\r\n                        id='loadAvatar'\r\n                        accept='.png, .jpg, .jpeg'\r\n                        onChange={photoHandle}\r\n                        error={!!errors.loadAvatar}\r\n                        helperText={errors?.loadAvatar?.message}\r\n                    />\r\n                </div>\r\n\r\n            </div>\r\n            <Input\r\n                ref={register}\r\n                id='nickname'\r\n                type='text'\r\n                label='Nickname'\r\n                name='nickname'\r\n                defaultValue='@'\r\n            />\r\n            <Input\r\n                ref={register}\r\n                id='email'\r\n                type='email'\r\n                label='E-mail'\r\n                name='email'\r\n                required\r\n                error={!!errors.email}\r\n                helperText={errors?.email?.message}\r\n            />\r\n            <Input\r\n                ref={register}\r\n                id='phoneNumber'\r\n                type='tel'\r\n                label='Phone number'\r\n                name='phoneNumber'\r\n                defaultValue='+38'\r\n                error={!!errors.phoneNumber}\r\n                helperText={errors?.phoneNumber?.message}\r\n                onChange={(event) => event.target.value = formatTheNumber(event.target.value)}\r\n            />\r\n            <ButtonSubmit>Ok</ButtonSubmit>\r\n\r\n        </FillForm>\r\n\r\n    )\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}